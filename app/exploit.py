from app.utility.base_object import BaseObject


class Exploit(BaseObject):

    @property
    def unique(self):
        return self.hash('%s' % self.identifier)

    @property
    def display(self):
        return self.clean(dict(unique=self.unique, identifier=self.identifier, name=self.name, category=self.category,
                               description=self.description, properties=self.properties))

    def __init__(self, identifier, name, description, category, payload, properties, access):
        super().__init__()
        self.identifier = identifier
        self.name = name
        self.description = description
        self.category = category
        self.payload = payload
        self.properties = [self.clean(p) for p in properties]
        self.access = access

    def store(self, ram):
        existing = self.retrieve(ram['exploits'], self.unique)
        if not existing:
            ram['exploits'].append(self)
            return self.retrieve(ram['exploits'], self.unique)
        return existing
